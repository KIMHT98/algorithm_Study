# 정규화(Normalization)
# 데이터베이스 설계에서 중복을 최소화하고 데이터의 무결성을 보장하기 위한 과정
# 1. 중복제거 : 데이터의 중복을 최소화 하여 저장공간을 절약하고 일관성을 유지한다.
# 2. 검색 및 조작 용이 : 테이블을 적절하게 나누어 두었기 때문에 데이터를 쉽게 검색하고 조작할 수 있다.
# 3. 확장성 : 데이터베이스의 확장이나 변경을 용이하게 해준다.

# 제 2정규화(2NF) : No partial dependencies

# Q. 제 2정규화에 대해 학습을 하고 간단한 설명을 작성해 봅시다.
/*
제 2 정규화는 부분 함수 종속성을 제거하는 단계이다.
부분 함수 종속성이란 테이블의 기본 키가 아닌 열이 기본 키의
일부에만 종속되는 경우를 말합니다.
예시와 같은 데이블이라면 기본키가 (id, 교육생)이므로 
나이와 프로그래밍 언어는 각각 교육생 이름에 종속이 되므로 
이를 각각 분리시킨 것입니다.
*/

# Q. [문제 2] 그림처럼  제 1정규화를 진행한 데이터 테이블이있을 때 제 2정규화 과정을 진행하고 난 뒤의 테이블을 작성해 봅시다. (자유롭게)
/*
id/name /pl
1 /양싸피/Java
2 /양싸피/Python
3 /김싸피/Java
4 /박싸피/SQL
5 /홍싸피/JavaScript

pl        /description
Java      /플랫폼에 ...
Python    /사용하기 ...
SQL       /관계형 ...
JavaScript/웹 브라우저 ..
*/

# 제 3정규화(2NF) : No transitive dependencies

# Q. 제 3정규화에 대해 학습을 하고 간단한 설명을 작성해 봅시다.
/*
테이블의 모든 비주요 속성이 기본 키가 아닌 다른 후보키에
이행적 함수 종속성을 갖지 않도록 하는 과정
이행적 함수 종속성이란 한 열이 다른 열에 종속되는 것이 아니라
다른 열을 통해 간접적으로 종속되는 경우이다.
*/

# Q. [문제 4] 그림처럼  제 2정규화를 진행한 데이터 테이블이있을 때 제 3정규화 과정을 진행하고 난 뒤의 테이블을 작성해 봅시다. (자유롭게)
/*
pl/description/designed by/
designed by/developer/
위의 두 테이블로 분리된다.
*/
